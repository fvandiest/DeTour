from .Plot import Plot
from .Route import Route
from .Graph import Graph
from .Model import Model
from .Recommender import Recommender
from .core import user_profiles, graph_item_dict

import matplotlib.pyplot as plt
from osmnx.utils import log, config


class Run(object):
    """
    The Run class provide the core function to run the complete model

    """

    def __init__(self, starting_point, fname='DeTour', user_profile_nm='Base',
                distance_target=10000, nr_neighbors=100, neighbor_factor=0.005):
        """
        Initializes the Run object instance

        Parameters
        ----------

        starting_point: string
            description of the address or location as starting point of the route
        fname: string
            prefix for the name of all image files generated by the script
        user_profile: string
            name of the user_profile captured in the DeTour.core.py user_profile
            dictionary
        distance_target: int
            length of target distance in meters for the walking tour
        nr_neighbors: int
            number of neighboring nodes to be considered in the weighting model
        neighbor_factor: float
            factor to which the weight of a node's neighbor is taken into account
            for that node

        """

        # Activate the logging mechanism
        config(log_file=False, log_console=True, use_cache=True)

        # Initialize the core attribute needed for running the model
        self.starting_point = starting_point
        self.__fname = fname
        self.user_profile = user_profiles[user_profile_nm]
        self.distance_target = distance_target
        self.__nr_neighbors = nr_neighbors
        self.__neighbor_factor = neighbor_factor
        self.__user_scoring_factors = self.user_profile['user_scoring_factors']

        # Run the model to generate the outcome attributes
        self.run()

    def run(self):

        # Instantiate route with starting point
        route = Route(start_query=self.starting_point)

        # Set walk network, instantiated at the start checkpoint
        walk_network = Graph(route.route_checkpoints[0])

        # Set plot and add allocated nodes
        route_plot = Plot(walk_network.bbox)
        route_plot = route_plot.plot_figure_ground(walk_network.network)
        route_plot = route_plot.plot_items(walk_network.network_osm_data)

        # Set model parameters
        model = Model(osm_data_keys=walk_network.network_osm_data.keys(),
                      route_distance_target=self.distance_target,
                      nr_neighbors=self.__nr_neighbors,
                      neighbor_factor=self.__neighbor_factor)
        model = model.set_user_scoring_factors(**self.__user_scoring_factors)

        # Allocate the (touristic) graph items to the nodes
        walk_network = walk_network.allocate_items_to_graph(model)

        # Make recommendations
        recommender = Recommender(self.user_profile)
        recommender = recommender.set_recommendations(walk_network.bbox)

        # Add recommendations to route checkpoints
        route = route.add_recommendations(recommender.recommendations)
        route = route.set_nearest_nodes(walk_network.network)
        route = route.generate_route(walk_network.network)
        route = route.set_route_score(walk_network, model)
        route = model.optimize_route(walk_network, route)

        # Add route to plot
        route_plot = route_plot.add_route(walk_network.network, route)
        route_plot = route_plot.plot_statistics(model)
        route_plot = route_plot.plot_adjustment_factors(walk_network,
                                                        model.iterative_statistics['adjustment_factors'][-1])
        route_plot = route_plot.plot_cockpit(filename=self.__fname, save=True)

        # Set the outcome of the model as attributes of the object
        self.route_plot = route_plot.cockpit_figure
        self.recommendations = recommender.recommendations

        plt.show()
        #print(self.recommendations)



    def __str__(self):
        return('DeTour.Run')


if __name__ == '__main__':
    self.__init__(starting_point, fname, user_profile,
                  distance_target, nr_neighbors, neighbor_factor)
    self.run()
